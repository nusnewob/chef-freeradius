ldap {
	server = "<%=node['freeradius']['ldap_server']%>"
	port = "<%=node['freeradius']['ldap_port']%>"
	identity = "<%=node['freeradius']['ldap_identity']%>"
	password = "<%=node['freeradius']['ldap_password']%>"
	base_dn = "<%=node['freeradius']['ldap_basedn']%>"
	sasl {
    #mech = 'PLAIN'
    #proxy = 'autz_id'
    #realm = 'example.org'
	}

	update {
		control:Password-With-Header	+= 'userPassword'
		control:			+= 'radiusControlAttribute'
		request:			+= 'radiusRequestAttribute'
		reply:				+= 'radiusReplyAttribute'
	}

	user {
		base_dn = "${..base_dn}"
		filter = "(uid=%{%{Stripped-User-Name}:-%{User-Name}})"
		sasl {
      #mech = 'PLAIN'
      #proxy = &User-Name
      #realm = 'example.org'
		}
	}

	group {
		base_dn = "${..base_dn}"
		filter = '(objectClass=posixGroup)'
		membership_attribute = 'memberOf'
	}

	profile {
    #filter = '(objectclass=radiusprofile)'
    #default = 'cn=radprofile,dc=example,dc=org'
    #attribute = 'radiusProfileDn'
	}

	client {
		base_dn = "${..base_dn}"
		filter = '(objectClass=radiusClient)'
		}
		attribute {
			ipaddr				= 'radiusClientIdentifier'
			secret				= 'radiusClientSecret'
		}
	}

	accounting {
		reference = "%{tolower:type.%{Acct-Status-Type}}"
		type {
			start {
				update {
					description := "Online at %S"
				}
			}
			interim-update {
				update {
					description := "Last seen at %S"
				}
			}
			stop {
				update {
					description := "Offline at %S"
				}
			}
		}
	}

	post-auth {
		update {
			description := "Authenticated at %S"
		}
	}

	options {
		chase_referrals = yes
		rebind = yes
		res_timeout = 10
		srv_timelimit = 3
		net_timeout = 1
		idle = 60
		probes = 3
		interval = 3
		#ldap_debug = 0x0028
	}

	tls {
    #start_tls = yes
    #ca_file	= ${certdir}/cacert.pem
    #ca_path	= ${certdir}
    #certificate_file = /path/to/radius.crt
    #private_key_file = /path/to/radius.key
    #random_file = /dev/urandom
    #require_cert	= 'demand'
	}

	pool {
		start = ${thread[pool].start_servers}
		min = ${thread[pool].min_spare_servers}
		max = ${thread[pool].max_servers}
		spare = ${thread[pool].max_spare_servers}
		uses = 0
		retry_delay = 30
		lifetime = 0
		idle_timeout = 60
	}
}
